///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $config = require(process.env.TUX_CONFIG); /// Configuration Settings //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const Sequelize = require('sequelize'); /// Sequelize Module /////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $utility = require('./Utility'); /// Utility Module ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $path = require('path'); /// Path Module ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $glob = require('glob'); /// GLOB Module ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = new(class CommonDatabase { /// CommonDatabase Class Definition //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new CommonDatabase class object
	 * @name CommonDatabase.constructor()
	 * @returns {CommonDatabase}
	 */
	constructor() {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Constants ////////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * This constant is a convenience contant providing access the Sequelize's Op class
		 * @name CommonDatabase.Operator
		 * @type{Sequelize.Op}
		 */
		this.Operator = Sequelize.Op;

		/**
		 * This constant is a convenience contant providing access the Sequelize's QueryTypes class
		 * @name CommonDatabase.Query
		 * @type{Sequelize.QueryTypes}
		 */
		this.Query = Sequelize.QueryTypes;

		/**
		 * This constant is a convenience contant providing access the Sequelize's DataTypes class
		 * @name CommonDatabase.Type
		 * @type{Sequelize.DataTypes}
		 */
		this.Type = Sequelize.DataTypes;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * This property contains the database connection
		 * @name CommonDatabase.mConnection
		 * @type {Sequelize}
		 */
		this.mConnection = null;

		/**
		 * This method contains the Sequelize ORM class
		 * @name CommonDatabase.mLibrary
		 * @type {Sequelize}
		 */
		this.mLibrary = Sequelize;

		/**
		 * This property contains our ORM models
		 * @name CommonDatabase.mModels
		 * @type {Object.<string, Sequelize.Model>}
		 */
		this.mModels = {};

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Connection Initialization ////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Set the connection into the instance
		this.mConnection = new Sequelize(
			$config.db.name,
			$config.db.username,
			$config.db.password,
			$config.db.options
		);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Model Import /////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Load the Model files
		$glob.sync($path.join(__dirname, '..', 'Model', 'Fluent', '**', '*.js')).each(($file) => {
			// Resolve the model
			this.mConnection.import($path.resolve($file));
		});
		// Iterate over the models
		Object.keys(this.models()).each(($name) => {
			// Check for an associate method
			if (this.model($name).associate) {
				// Execute the association method
				this.model($name).associate(this.models());
			}
		});

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Public Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method executes a SQL file stored on the filesystem
	 * @async
	 * @name CommonDatabase.executeSqlFile()
	 * @param {string} $file
	 * @param {Object.<string, any>} $options
	 * @returns {q.Promise}
	 * @uses CommonDatabase.connection()
	 */
	async executeSqlFile($file, $options) {
		// Check the file path
		if ($file.substr(0, 1) !== $path.sep) {
			// Reset the file name
			$file = $path.join(__dirname, 'Data', 'Query', $file);
		}
		// Check for an extension
		if ($file.substr(-4).toLowerCase() !== '.sql') {
			// Append the extension
			$file += '.sql';
		}
		// Read the SQL file
		let $sql = await $utility.readFile($file, 'utf8');
		// Execute the query
		return await this.connection().query($sql);
	}

	/**
	 * This method defines a model in the instance
	 * @name CommonDatabase.use()
	 * @param {String} $name
	 * @param {Object.<string, Object.<string, any>>} $columnSpec
	 * @param {Object.<string, Object.<string, any>>, optional} $tableSpec
	 * @returns {CommonDatabase}
	 */
	use($name, $columnSpec, $tableSpec = {}) {
		// Set the model into the instance
		this.mConnection.define($name, $columnSpec, $tableSpec);
		// We're done, return the instance
		return this;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Inline Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method returns the database connection from the instance
	 * @name CommonDatabase.connection()
	 * @returns {Sequelize}
	 */
	connection() {
		// Return the connection from the instance
		return this.mConnection;
	}

	/**
	 * This method returns the Sequelize ORM class from the instance
	 * @name CommonDatabase.library()
	 * @returns {Sequelize}
	 */
	library() {
		// Return the ORM library from the instance
		return this.mLibrary;
	}

	/**
	 * This method returns a model from the instance
	 * @name CommonDatabase.model()
	 * @param {string} $name
	 * @returns {Sequelize.Model}
	 */
	model($name) {
		// Return the model from the instance
		return this.mConnection.model($name);
	}

	/**
	 * This method returns the models from the instance
	 * @name CommonDatabase.models()
	 * @returns {Object.<string, Sequelize.Model>}
	 */
	models() {
		// Return the models from the instance
		return this.mConnection.models;
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
})(); /// End CommonDatabase Class Definition ////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
