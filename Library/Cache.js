///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $config = require('../Common/Configuration'); /// Configuration Settings ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $utility = require('../Common/Utility'); /// Utility Module ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $path = require('path'); /// Path Module ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $crypt = require('./Cryptography'); /// Cryptography Module ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class LibraryCache { /// LibraryCache Class Definition //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Public Static Methods ////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method checks to see whether or not a cache file exists
	 * @async
	 * @name LibraryCache.exists()
	 * @param {string} $name
	 * @returns {string}
	 * @static
	 */
	static async exists($name) {
		// Define our file name
		let $fileName = $path.join($config.system.cache.directory, $config.system.cache.prefix.concat($name));
		// Try to stat the file
		try {
			// Stat the file
			await $utility.stat($fileName);
			// We're done, the file exists
			return true;
		} catch ($error) {
			// We're done, the file doesn't exist
			return false;
		}
	}

	/**
	 * This method reads a cached file from the filesystem
	 * @async
	 * @name LibraryCache.read()
	 * @param {string} $name
	 * @returns {string}
	 * @static
	 */
	static async read($name) {
		// Define our file name
		let $fileName = $path.join($config.system.cache.directory, $config.system.cache.prefix.concat($name));
		// Read the file
		let $cachedData = await $utility.fsReadFile($fileName);
		// Decode the data
		$cachedData = JSON.parse($cachedData.toString());
		// Check the timestamp
		if (((new Date).getTime() - $cachedData.meta.timeStamp) >= $config.system.cache.ttl) {
			// Define our error
			let $error = new Error('Cache Expired');
			// Set the status into the error
			$error.code = 'TUXCACHEEXPIRED';
			// We're done, throw the error
			throw $error;
		}
		// We're done, return the cached data
		return ($cachedData.meta.encrypted ? $crypt.secretDecrypt($cachedData.data) : $cachedData.data);
	}

	/**
	 * This method a cache file to the filesystem
	 * @async
	 * @name LibraryCache.write()
	 * @param {string} $name
	 * @param {string} $data
	 * @param {boolean, optional} $encrypt [undefined]
	 * @returns {string}
	 * @static
	 */
	static async write($name, $data, $encrypt = undefined) {
		// Check for a provided encrypt flag
		if ($encrypt === undefined) {
			// Reset the encrypt flag
			$encrypt = $config.system.cache.encrypt;
		}
		// Define our file name
		let $fileName = $path.join($config.system.cache.directory, $config.system.cache.prefix.concat($name));
		// Define our cache object
		let $cachedData = {};
		// Define our cache meta data
		$cachedData['meta'] = {};
		// Define our encrypted flag
		$cachedData.meta.encrypted = $encrypt;
		// Define our cache timestamp
		$cachedData.meta.timeStamp = (new Date).getTime();
		// Define our cache data
		$cachedData.data = ($encrypt ? $crypt.secretEncrypt($data) : $data);
		// Write the file to the filesystem
		await $utility.fsWriteFile($fileName, JSON.stringify($cachedData));
		// We're done, return the written data
		return $cachedData;
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End LibraryCache Class Definition /////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
