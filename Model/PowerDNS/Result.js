///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $utility = require('../../Common/Utility'); /// Utility Module /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class ModelPowerDNSResult { /// ModelPowerDNSResult Class Definition ////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new PowerDNS result model
	 * @name ModelPowerDNSResult.constructor()
	 */
	constructor() {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * This property contains the log for the result
		 * @name ModelPowerDNSResult.mLog
		 * @type {Array.<string>}
		 */
		this.mLog = [];

		/**
		 * This property contains the result records or flag
		 * @name ModelPowerDNSResult.mResult
		 * @type {Array.<Object.<string, any>>|boolean}
		 */
		this.mResult = false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Public Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method adds a log entry to the result
	 * @name ModelPowerDNSResult.logEntry()
	 * @param {string} $message
	 * @returns {ModelPowerDNSResult}
	 */
	logEntry($message) {
		// Add the log entry to the instance
		this.mLog.push($message);
		// We're done, return the instance
		return this;
	}

	/**
	 * This method adds a DNS record to the result
	 * @name ModelPowerDNSResult.recordEntry()
	 * @param {string} $type
	 * @param {string} $name
	 * @param {integer} $ttl
	 * @param {uuid} $domainId
	 * @param {string} $content
	 * @param {integer, optional} $priority [null]
	 * @param {boolean, optional} $auth [true]
	 * @returns {ModelPowerDNSResult}
	 */
	recordEntry($type, $name, $ttl, $domainId, $content, $priority = null, $auth = true) {
		// Define our record object
		let $record = {
			'qtype': $type,
			'qname': $name,
			'ttl': $ttl,
			'domain_id': $domainId,
			'content': ($utility.lodash.isNull($priority) ? $content : ($priority + ' ' + $content)),
			'auth': $auth
		};
		// Check for an array
		if (!$utility.lodash.isArray(this.mResult)) {
			// Reset the result
			this.mResult = [];
		}
		// Add the record to the result
		this.mResult.push($record);
		// We're done, return the instance
		return this;
	}

	/**
	 * This method sets the result to a hard success
	 * @name ModelPowerDNSResult.successful()
	 * @returns {ModelPowerDNSResult}
	 */
	successful() {
		// Reset the result to true
		this.mResult = true;
		// We're done, return the instance
		return this;
	}

	/**
	 * This method sets the result to a hard failure
	 * @name ModelPowerDNSResult.unsuccessful()
	 * @returns {ModelPowerDNSResult}
	 */
	unsuccessful() {
		// Reset the result to false
		this.mResult = false;
		// We're done, return the instance
		return this;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Converters ///////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method converts the result to a JSON payload
	 * @name ModelPowerDNSResult.toJson()
	 * @returns {string}
	 */
	toJson() {
		// Return the JSON encoded result
		return JSON.stringify({
			'result': this.mResult,
			'log': this.mLog
		});
	}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End ModelPowerDNSResult Class Definition //////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
