///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const log4js = require('log4js'); /// Logging Module /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class CommonSocket { /// CommonService Class Definition /////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new abstract service
	 * @name CommonService.constructor()
	 * @param {string} $sysLogId
	 * @param {string, optional} $logLevel ['debug']
	 */
	constructor($sysLogId, $logLevel = 'debug') {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Logger Configuration /////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Define our configuration structure
		const $loggerConfig = {
			'appenders': {},
			'categories': {
				'default': {
					'appenders': [],
					'level': $logLevel
				}
			}
		};
		// Add our appender to the configuration
		$loggerConfig.appenders[$sysLogId] = {
			'layout': {
				'type': 'colored'
			},
			'type': 'stdout'
		};
		// Add our appender to the default category
		$loggerConfig.categories.default.appenders.push($sysLogId);
		// Configure the logger
		log4js.configure($loggerConfig);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * This property contains the instance of our logger
		 * @name CommonService.mLogger
		 * @type {Logger}
		 */
		this.mLogger = log4js.getLogger($sysLogId);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Abstract Methods /////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method is a stub for starting the service
	 * @async
	 * @name CommonService.start()
	 * @returns {void}
	 * @throws {Error}
	 */
	async start() {
		// Define our error
		let $error = new Error('Children of CommonService must implement an aynchronous start() method');
		// Set the code into the error
		$error.code = 'TUXSYSTEMSSERVICESTARTNOTIMPLEMENTED';
		// We're done, throw the error
		throw $error;
	}

	/**
	 * This method is a stub for stopping the service
	 * @async
	 * @name CommonService.stop()
	 * @returns {void}
	 * @throws {Error}
	 */
	async stop() {
		// Define our error
		let $error = new Error('Children of CommonService must implement an aynchronous stop() method');
		// Set the code into the error
		$error.code = 'TUXSYSTEMSSERVICESTOPNOTIMPLEMENTED';
		// We're done, throw the error
		throw $error;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Inline Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method returns our logger from the instance
	 * @name CommonService.logger()
	 * @returns {Logger}
	 */
	logger() {
		// Return the logger from the instance
		return this.mLogger;
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End CommonService Class Definition ////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
