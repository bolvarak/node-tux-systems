#!/usr/bin/env node

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $config = require(process.env.TUX_CONFIG); /// Configuration Settings //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $db = require('../Common/Database'); /// Database Connection ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $utility = require('../Common/Utility'); /// Utility Module ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const LibraryPowerDNS = require('../Library/PowerDNS'); /// PowerDNS Library Module //////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CommonServiceSocket = require('../Common/Service/Socket'); /// Socket Module ///////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const ModelPowerDNSResult = require('../Model/PowerDNS/Result'); /// PowerDNS Result Model ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class ServicePowerDNS extends CommonServiceSocket { /// ServicePowerDNS Class Definition ////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new PowerDNS Socket Service
	 * @name ServicePowerDNS.constructor()
	 */
	constructor() {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		super($config.pdns.socket, $config.pdns.log.id, $config.pdns.log.level); /// Super Constructor ///////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Implementations //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method handles the client request
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientRequest()
	 * @param {string} $clientId
	 * @param {Socket} $stream
	 * @param {Buffer} $payload
	 * @returns {Promise<void>}
	 * @uses CommonService.logger()
	 */
	async clientRequest($clientId, $stream, $payload) {
		// Try to process the request
		try {
			// Parse the payload
			$payload = JSON.parse($payload.toString());
			// Log the payload
			this.logger().debug($utility.util.format('Client [%s] Payload\t%s', $clientId, JSON.stringify($payload)));
			// Instantiate our model
			let $queryModel = await $db.model('dnsQuery').create({
				'clientId': $clientId,
				'method': $payload.method,
				'request': $payload
			});
			// Instantiate the library
			let $libPowerDNS = new LibraryPowerDNS($queryModel, this.logger());
			// Await the response
			await $libPowerDNS.response();
			// Write the result to the socket
			$stream.write($libPowerDNS.result().toJson() + '\n');
		} catch ($error) {
			// Log the error
			this.logger().error($error.message);
			// Instantiate our result model
			let $powerDnsResult = new ModelPowerDNSResult();
			// Set the result to failure
			$powerDnsResult.unsuccessful();
			// Add the error message
			$powerDnsResult.log($error.message);
			// Add the forced disconnect message
			$powerDnsResult.log('Forced Disconnect');
			// Send the response
			$stream.write($powerDnsResult.toJson() + '\n');
			// Close the connection
			$stream.end();
		}
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End ServicePowerDNS Class Definition //////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
