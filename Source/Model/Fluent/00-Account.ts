///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import { Column, DataType, HasMany, Model, Table, Length, ForeignKey } from 'sequelize-typescript'; /// Sequelize ////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Account Table Model Definition ///////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Table({ tableName: 'account' })
class Account extends Model<Account> {

	@Column({
		'allowNull': false,
		'defaultValue': DataType.UUIDV4,
		'field': 'id',
		'primaryKey': true,
		'type': DataType.UUID
	})
	id!: string;

	@Column({
		'allowNull': true,
		'defaultValue': true,
		'field': 'is_active',
		'type': DataType.BOOLEAN
	})
	isActive!: boolean;

	@Column({
		'allowNull': false,
		'field': 'name',
		'type': DataType.STRING
	})
	@Length({ max: 150 })
	name!: string;

	@Column({
		'allowNull': true,
		'field': 'parent_account_id',
		'type': DataType.UUID
	})
	@ForeignKey(() => Account)
	parentAccountId!: string;

	@HasOne(() => Account)
	parentAccount!: Account;

	@HasMany(() => Account, 'parentAccountId')
	subAccountList!: Account[];

	@HasMany(() => User)
	userList!: User[];
}
