///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $express = require('express'); /// Express Framework Module ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $http = require('http'); /// HTTP Module ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const $utility = require('../Utility'); /// Utility Module ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const CommonService = require('../Service'); /// CommonService Module ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const log4js = require('log4js'); /// Logging Module /////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
module.exports = class CommonServiceHttp extends CommonService { /// CommonServiceHttp Class Definition //////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new Server listener
	 * @name CommonServiceHttp.constructor()
	 * @param {number|string, optional} $port [8443]
	 * @param {string, optional} $sysLogId ['tux-systems-http']
	 * @param {striong, optional} $logLevel ['debug']
	 */
	constructor($port = 8443, $sysLogId = 'tux-systems-http', $logLevel = 'debug') {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		super($sysLogId, $logLevel); /// Super Constructor ///////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Logger Configuration /////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Define our configuration structure
		const $loggerConfig = {
			'appenders': {},
			'categories': {
				'default': {
					'appenders': [],
					'level': $logLevel
				}
			}
		};
		// Add our appender to the configuration
		$loggerConfig.appenders[$sysLogId] = {
			'layout': {
				'type': 'colored'
			},
			'type': 'stdout'
		};
		// Add our appender to the default category
		$loggerConfig.categories.default.appenders.push($sysLogId);
		// Configure the logger
		log4js.configure($loggerConfig);

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Properties ///////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 * This property contains the application instance
		 * @name CommonServiceHttp.mApplication
		 * @type {Express}
		 */
		this.mApplication = {};

		/**
		 * This property contains the HTTP server for the application
		 * @name CommonServiceHttp.mServer
		 * @type {http.Server}
		 */
		this.mServer = {};

		/**
		 * This property contains the port number that the application should listen on
		 * @name CommonServiceHttp.mPort
		 * @type {number|string}
		 */
		this.mPort = $port;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/// Construction /////////////////////////////////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

		// Attach to the SIGIN signal
		process.on('SIGINT', async () => {
			// Cleanup the connections and shut the server down
			await this.stop();
		});

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Normalization Methods ////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method normalizes and validates the TCP port or UNIX socket path
	 * @name CommonServiceHttp.normalizePort()
	 * @param {number|string, optional} $value
	 * @returns {number|string|boolean}
	 */
	normalizePort($value) {
		// Parse the port as a number
		let $port = parseInt($value, 10);
		// Check for a number
		if (isNaN($port)) {
			// We're done, we have a UNIX socket
			return $value;
		}
		// Make sure the port number is valid
		if ($port >= 0) {
			// We're done, return the port number
			return $port;
		}
		// We're done, no valid port number or socket
		return false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Event Handlers ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method handles any errors that happen while starting and/or running the application server
	 * @name CommonServiceHttp.error()
	 * @param {Error} $error
	 * @returns {void}
	 * @throws {Error}
	 */
	error($error) {
		// Check to see if the server is spawning
		if ($error.syscall !== 'listening') {
			// We're done, throw the error
			throw $error;
		}
		// Define our binding
		let $binding = ((typeof this.port() === 'string') ? ('UNIX:[' + this.port() + ']') : ('TCP:[' + this.port() + ']'));
		// Check the error code
		if ($error.code.toLowerCase() === 'eaccess') {
			// Send the error to the console
			this.logger().error('Pre-Flight:\tPermission Denied On ' + $binding + '!');
			// We're done, kill the application
			process.exit(1);
		} else if ($error.code.toLowerCase() === 'eaddrinuse') {
			// Send the error to the console
			this.logger().error('Pre-Flight:\t' + $binding + ' Already In Use!');
			// We're done, kill the application
			process.exit(1);
		} else {
			// We're done, throw the error
			throw $error;
		}
	}

	/**
	 * This method handles the listening event for the application server
	 * @name CommonServiceHttp.listening()
	 * @returns {void}
	 * @private
	 */
	listening() {
		// Define our binding
		let $binding = ((typeof this.httpServer().address() === 'string') ? ('UNIX:[' + this.httpServer().address() + ']') : ('TCP:[' + this.httpServer().address().port + ']'));
		// Output to debug
		this.logger().info('Pre-Flight:\tListening on ' + $binding);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Implementations //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method initializes and dispatches the application HTTP server
	 * @async
	 * @name CommonServiceHttp.start()
	 * @returns {Promise.<void>}
	 * @uses CommonServiceHttp.application()
	 * @uses CommonServiceHttp.server()
	 */
	async start() {
		// Set the port into the application
		this.application().set('port', this.port());
		// Create our server
		this.server($http.createServer(this.application()));
		// Dispatch the server
		this.server().listen(this.port());
		// Bind to the error event
		this.server().on('error', ($error) => {
			// Return the event handler
			return this.error($error);
		});
		// Bind to the listening event
		this.server().on('listening', () => {
			// Return the event handler
			return this.listening();
		});
	}

	/**
	 * This method stops the listening server
	 * @async
	 * @name CommonServiceHttp.stop()
	 * @returns {Promise.<void>}
	 */
	async stop() {
		// Stop the service
		this.server().close();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Inline Methods ///////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method returns the Express application from the instance with the ability to reset it inline
	 * @name CommonServiceHttp.application()
	 * @param {Express, optional}
	 * @returns {Express}
	 */
	application($application) {
		// Check for a provided application
		if ($utility.lodash.isObject($application)) {
			// Reset the application into the instance
			this.mApplication = $application;
		}
		// We're done, return the application from the instance
		return this.mApplication;
	}

	/**
	 * This method returns the port from the instance with the ability to reset it inline
	 * @name CommonServiceHttp.port()
	 * @param {number|string, optional} $port
	 * @returns {boolean|number|string}
	 */
	port($port) {
		// Check for a provided port
		if (($utility.lodash.isNumber($port) && ($port > 0)) || ($utility.lodash.isString($port) && !$utility.lodash.isEmpty($port))) {
			// Reset the port into the instance
			this.mPort = this._normalizePort($port);
		}
		// We're done, return the port from the instance
		return this.mPort;
	}

	/**
	 * This method returns the HTTP Server from the instance with the ability to reset it inline
	 * @name CommonServiceHttp.server()
	 * @param {http.Server, optional} $httpServer
	 * @returns {http.Server}
	 */
	server($httpServer) {
		// Check for a provided HTTP Server
		if ($httpServer instanceof $http.Server) {
			// Reset the HTTP Server into the instance
			this.mHttpServer = $httpServer
		}
		// We're done, return the HTTP Server from the instance
		return this.mHttpServer;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End CommonServiceHttp Class Definition /////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
