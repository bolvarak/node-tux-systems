///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Sequelize Dependencies ///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {
	BeforeCreate,
	BeforeUpdate,
	BelongsTo,
	Column,
	DataType,
	IsInt,
	Model,
	Table
} from 'sequelize-typescript';

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import User from '../05-User'; /// User Model ////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsDomain from './00-Domain'; /// DNS Domain Model ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DNS Record Table Model Definition ////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Table({
	indexes: [
		{fields: ['dns_domain_id']},
		{fields: ['host']},
		{fields: ['is_active']},
		{fields: ['is_dynamic']},
		{fields: ['type']},
		{fields: ['user_id']}
	],
	tableName: 'dns_record'
})
export default class DnsRecord extends Model<DnsRecord> {

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Columns //////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Column({
		allowNull: false,
		field: 'dns_domain_id',
		type: DataType.UUID
	})
	domainId!: string;

	@Column({
		allowNull: true,
		field: 'flag',
		type: DataType.INTEGER
	})
	@IsInt
	flag!: number

	@Column({
		allowNull: true,
		defaultValue: '@',
		field: 'host',
		type: DataType.TEXT
	})
	host!: string;

	@Column({
		allowNull: false,
		defaultValue: DataType.UUIDV4,
		field: 'id',
		primaryKey: true,
		type: DataType.UUID
	})
	id!: string;

	@Column({
		allowNull: false,
		defaultValue: true,
		field: 'is_active',
		type: DataType.BOOLEAN
	})
	isActive!: boolean;

	@Column({
		allowNull: false,
		defaultValue: false,
		field: 'is_dynamic',
		type: DataType.BOOLEAN
	})
	isDynamic!: boolean;

	@Column({
		allowNull: false,
		defaultValue: false,
		field: 'is_system_record',
		type: DataType.BOOLEAN
	})
	isSystem!: boolean;

	@Column({
		allowNull: true,
		field: 'port',
		type: DataType.INTEGER
	})
	@IsInt
	port!: number;

	@Column({
		allowNull: true,
		field: 'priority',
		type: DataType.INTEGER
	})
	@IsInt
	priority!: number;

	@Column({
		allowNull: true,
		field: 'tag',
		type: DataType.ENUM(
			'iodef',
			'issue',
			'issuewild'
		)
	})
	tag!: string;

	@Column({
		allowNull: true,
		field: 'target',
		type: DataType.TEXT
	})
	target!: string;

	@Column({
		allowNull: false,
		defaultValue: 3600,
		field: 'ttl',
		type: DataType.INTEGER
	})
	@IsInt
	ttl!: number;

	@Column({
		allowNull: false,
		field: 'type',
		type: DataType.ENUM(
			'A',
			'AAAA',
			'CAA',
			'CNAME',
			'DNSSEC',
			'MX',
			'NS',
			'SRV',
			'TXT'
		)
	})
	type!: string;

	@Column({
		allowNull: false,
		field: 'user_id',
		type: DataType.UUID
	})
	userId!: string;

	@Column({
		allowNull: true,
		field: 'weight',
		type: DataType.INTEGER
	})
	@IsInt
	weight!: number;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Associations /////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@BelongsTo(() => User)
	user!: User;

	@BelongsTo(() => DnsDomain)
	domain!: DnsDomain;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Hooks ////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@BeforeCreate
	@BeforeUpdate
	public static normalizeRecordHost($instance: DnsRecord): void {
		// Reset the record name
		$instance.host = $instance.host.toLowerCase().trim();
	}
};
