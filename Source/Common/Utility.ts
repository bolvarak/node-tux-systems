///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import * as fs from 'fs'; /// File-System Module /////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import * as lodash from 'lodash'; /// Lodash Utility Module //////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import * as util from 'util'; /// Utility Module /////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import {v4 as uuidv4} from 'uuid'; /// UUIDv4 Module /////////////////////////////////////////////////////////////////
import { DataTypeUUIDv4 } from 'sequelize';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export class CommonUtility { /// CommonUtility Class Definition //////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Properties ///////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This property contains a reference the the Lodash utility module
	 * @name CommonUtility.lodash
	 * @public
	 * @static
	 * @type {lodash}
	 */
	public static lodash = lodash;

	/**
	 * This property contains a reference to the utility module
	 * @name CommonUtility.util
	 * @public
	 * @static
	 * @type {util}
	 */
	public static util = util;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Filesystem-Promises //////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method provides a Promise wrapper for fs.readFile()
	 * @name CommonUtility.fsReadFile()
	 * @param {fs.PathLike} $path
	 * @param {string|{encoding?: null, flag?: string}, optional} $options
	 * @public
	 * @returns {Promise<Buffer>}
	 * @static
	 */
	public static fsReadFile($path: fs.PathLike, $options?: string|{encoding?: null, flag?: string}): Promise<Buffer> {
		// Return our new Promise
		return new Promise<Buffer>(($resolve, $reject) => {
			// Read the file
			fs.readFile()
			fs.readFile($path, $options, ($error, $data) => {
				// Check for an error
				if ($error) {
					// We're done, reject the promise
					return $reject($error);
				}
				// We're done, resolve the promise
				return $resolve($data);
			});
		});
	}

	/**
	 * This method provides a Promise wrapper for fs.stat()
	 * @name CommonUtility.fsStat()
	 * @param {fs.PathLike} $path
	 * @public
	 * @returns {Promise<fs.Stats>}
	 * @static
	 */
	public static fsStat($path: fs.PathLike): Promise<fs.Stats> {
		// Return our new Promise
		return new Promise<fs.Stats>(($resolve, $reject) => {
			// Stat the path
			fs.stat($path, ($error, $stats) => {
				// Check for an error
				if ($error) {
					// We're done, reject the promise
					return $reject($error);
				}
				// We're done, resolve the promise
				return $resolve($stats);
			});
		});
	}

	/**
	 * This method provides a Promise wrapper for fs.unlink()
	 * @name CommonUtility.fsUnlink()
	 * @param {fs.PathLike} $path
	 * @public
	 * @returns {Promise<void>}
	 * @static
	 */
	public static fsUnlink($path: fs.PathLike): Promise<void> {
		// Return our new Promise
		return new Promise<void>(($resolve, $reject) => {
			// Delete the file
			fs.unlink($path, ($error) => {
				// Check for an error
				if ($error) {
					// We're done, reject the promise
					return $reject($error);
				}
				// We're done, resolve the promise
				return $resolve();
			});
		});
	}

	/**
	 * This method provides a Promise wrapper for fs.writeFile()
	 * @name CommonUtility.fsWriteFile()
	 * @param {fs.PathLike} $path
	 * @param {any} $data
	 * @param {string|{encoding?: null, mode?: string|number, flag?: string}, optional} $options
	 * @public
	 * @returns {Promise<void>}
	 * @static
	 */
	public static fsWriteFile($path: fs.PathLike, $data: any, $options?: string|{encoding?: null, mode?: string|number, flag?: string}): Promise<void> {
		// Return our new Promise
		return new Promise<void>(($resolve, $reject) => {
			// Write the file
			fs.writeFile($path, $data, $options, ($error) => {
				// Check for an error
				if ($error) {
					// We're done, reject the promise
					return $reject($error);
				}
				// We're done, resolve the promise
				return $resolve();
			});
		});
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Utility Methods //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method generates and returns a UUIDv4 string
	 * @name CommonUtility.uuid()
	 * @returns {string}
	 * @public
	 * @static
	 * @uses uuidv4()
	 */
	public static uuid(): string {
		// Return the UUID
		return uuidv4();
	}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End CommonUtility Class Definition ////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
