///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import { CommonConfiguration as Config } from '../Common/Configuration'; /// Configuration Settings //////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import { CommonUtility as Utility } from '../Common/Utility'; /// Utility Module /////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import * as net from 'net'; /// Network Module ///////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import { CommonServiceSocketClient, CommonServiceSocket } from '../Common/Service/Socket'; /// Abstract Socket Class /
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export class ServicePowerDNS extends CommonServiceSocket { /// ServicePowerDNS Class Definition //////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new PowerDNS Socket Service
	 * @name ServicePowerDNS.constructor()
	 */
	constructor() {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		super(Config.pdns.socket, Config.pdns.log.id, Config.pdns.log.level); /// Super Constructor //////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Implementations //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method responds to an incoming connection
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientConnect()
	 * @param {net.Socket} $stream
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientConnect($stream: net.Socket): Promise<void> {

	}

	/**
	 * This method handles a client disconnecting
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientDisconnect()
	 * @param {string} $clientId
	 * @param {net.Socket} $stream
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientDisconnect($clientId: string, $stream: net.Socket): Promise<void> {

	}

	/**
	 * This method forces a client to disconnect
	 * @async
	 * @name ServicePowerDNS.clientForceDisconnect()
	 * @param {string} $clientId
	 * @param {Socket} $stream
	 * @returns {Promise<void>}
	 */
	protected async clientForceDisconnect($clientId: string, $stream: net.Socket): Promise<void> {

	}

	/**
	 * This method handles the client request
	 * @async
	 * @name ServicePowerDNS.clientRequest()
	 * @param {string} $clientId
	 * @param {net.Socket} $stream
	 * @param {Buffer} $payload
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientRequest($clientId: string, $stream: net.Socket, $payload: Buffer): Promise<void> {

	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}; /// End ServicePowerDNS Class Definition //////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
